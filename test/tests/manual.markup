Doc
  DocAttrs
    { docTitle =
        Title
          { titleBody =
              [ Str "The scriba markup language and document system" ]
          }
    , docPlainTitle = "The scriba markup language and document system"
    }
  SectionContent { secPreamble = [] , secChildren = [] }
  SectionContent
    { secPreamble =
        [ ParBlock
            (Paragraph
               [ ParInline
                   (Str
                      "Scriba is a plain text markup language emphasizing extensibility,\nclarity, and ease of use. It is also a compiler, taking source scriba\ndocuments and rendering them to multi-page HTML, EPUB, and TeX. The\nformat includes flexible markup constructs designed to represent a\nrange of historical scientific material, but these can be used equally\nwell for new publications.")
               ])
        ]
    , secChildren =
        [ Section
            { secTitle =
                Title { titleBody = [ Str "An introduction to the language" ] }
            , secContent =
                SectionContent
                  { secPreamble = []
                  , secChildren =
                      [ Section
                          { secTitle = Title { titleBody = [ Str "Paragraphs" ] }
                          , secContent =
                              SectionContent
                                { secPreamble =
                                    [ ParBlock
                                        (Paragraph
                                           [ ParInline
                                               (Str
                                                  "The bulk of your document will most likely be paragraphs, sequences of\nnormal text and marked-up content representing a single idea in your\nwriting. A paragraph in scriba is a type of ")
                                           , ParInline (Emph [ Str "block" ])
                                           , ParInline (Str ", and contains\n")
                                           , ParInline (Emph [ Str "paragraph text" ])
                                           , ParInline (Str " and ")
                                           , ParInline (Emph [ Str "elements" ])
                                           , ParInline
                                               (Str ". Two sample paragraphs are\ngiven below:")
                                           ])
                                    , CodeBlock
                                        "There was nothing so very remarkable in that; nor did Alice think\nit so very much out of the way to hear the Rabbit say to itself,\n{q|Oh dear! Oh dear! I shall be late!} (when she thought it over\nafterwards, it occurred to her that she ought to have wondered at\nthis, but at the time it all seemed quite natural); but when the\nRabbit actually {emph|took a watch out of its waistcoat-pocket},\nand looked at it, and then hurried on, Alice started to her feet,\nfor it flashed across her mind that she had never before seen a\nrabbit with either a waistcoat-pocket, or a watch to take out of\nit, and burning with curiosity, she ran across the field after it,\nand fortunately was just in time to see it pop down a large\nrabbit-hole under the hedge.\n\nIn another moment down went Alice after it, never once considering\nhow in the world she was to get out again."
                                    , ParBlock
                                        (Paragraph
                                           [ ParInline
                                               (Str
                                                  "Plain paragraph text is any span of unicode characters other than\n")
                                           , ParInline (Code "\\")
                                           , ParInline (Str ", ")
                                           , ParInline (Code "{")
                                           , ParInline (Str ", or ")
                                           , ParInline (Code "}")
                                           , ParInline
                                               (Str
                                                  ", with the additional restriction\nthat paragraph text cannot contain blank lines; like in the example\nabove, these signal the end of the paragraph. Those three characters\ncan be represented in paragraph text using the sequences ")
                                           , ParInline (Code "\\\\")
                                           , ParInline (Str ",\n")
                                           , ParInline (Code "\\{")
                                           , ParInline (Str ", and ")
                                           , ParInline (Code "\\}")
                                           , ParInline (Str ", should you need them in text. ")
                                           ])
                                    , ParBlock
                                        (Paragraph
                                           [ ParInline
                                               (Str "The other feature of paragraph markup is ")
                                           , ParInline (Emph [ Str "inline elements" ])
                                           , ParInline
                                               (Str
                                                  ", which\nare used to give further meaning to your text and to control scriba's\nmany features.")
                                           , ParInline (Str " Simple\nelements start with ")
                                           , ParInline (Code "{tag|")
                                           , ParInline (Str " and end with ")
                                           , ParInline (Code "}")
                                           , ParInline (Str ". The\nparagraphs above have a ")
                                           , ParInline (Code "q")
                                           , ParInline
                                               (Str
                                                  " element, representing quoted text\nand likely to be rendered between quotation marks, and an ")
                                           , ParInline (Code "emph")
                                           , ParInline
                                               (Str
                                                  "\nelement, representing emphasized text and likely to be rendered in\nitalic type.")
                                           ])
                                    ]
                                , secChildren = []
                                }
                          }
                      , Section
                          { secTitle = Title { titleBody = [ Str "Sections" ] }
                          , secContent =
                              SectionContent
                                { secPreamble =
                                    [ ParBlock
                                        (Paragraph
                                           [ ParInline
                                               (Str
                                                  "The content of your document can be organized into ")
                                           , ParInline (Emph [ Str "sections" ])
                                           , ParInline
                                               (Str
                                                  ",\nrepresenting self-contained units of discussion. These have types,\ntitles, and a body of blocks and subsections. Sections look like this:")
                                           ])
                                    , CodeBlock
                                        "# {title|An introduction to the language}\n\n## {title|Paragraphs}\n\nThe bulk of your document \8230"
                                    , ParBlock
                                        (Paragraph
                                           [ ParInline
                                               (Str "The first component of a section is its ")
                                           , ParInline (Emph [ Str "header" ])
                                           , ParInline (Str ". The section\nheader starts with ")
                                           , ParInline (Code "# sectionType")
                                           , ParInline (Str ", the number of consecutive\n")
                                           , ParInline (Code "#")
                                           , ParInline (Str " becoming the overall ")
                                           , ParInline (Emph [ Str "level" ])
                                           , ParInline
                                               (Str
                                                  " of the section. The\nsection content begins after the attributes of the section and at\nleast one blank line, and continues until a section of at most that\nlevel, or the end of the document, is reached. In the example above,\nthe ")
                                           , ParInline (Quote [ Str "Paragraphs" ])
                                           , ParInline
                                               (Str
                                                  " section would continue until a level 2 or level 1\nsection were encountered. The section type is optional; section types\nclassify the section, can denote built-in document structure, and can\ninfluence processing and rendering behaviour. Sections without a type\nbecome a generic ")
                                           , ParInline (Code "section")
                                           , ParInline (Str ".")
                                           ])
                                    , ParBlock
                                        (Paragraph
                                           [ ParInline
                                               (Str "Sections, like other elements, can have ")
                                           , ParInline (Emph [ Str "attributes" ])
                                           , ParInline
                                               (Str
                                                  ". The only\nrecognized attribute of a section, for now, is its title. In future,\nsections will have many attributes, like number, language, alternate\ntitles for the table of contents or page header, and so on. The\nattributes of sections can be listed on multiple consecutive lines, as\nlong as no blank line occurs between them.")
                                           ])
                                    ]
                                , secChildren = []
                                }
                          }
                      , Section
                          { secTitle = Title { titleBody = [ Str "Blocks" ] }
                          , secContent =
                              SectionContent
                                { secPreamble =
                                    [ ParBlock
                                        (Paragraph
                                           [ ParInline
                                               (Str
                                                  "The other type of syntactic form in scriba is the ")
                                           , ParInline (Emph [ Str "block" ])
                                           , ParInline
                                               (Str
                                                  "\nelement. Blocks group their content and give it extra meaning, and can\nappear wherever paragraphs or section headers can. Some blocks are\nshown in the following code sample:")
                                           ])
                                    , CodeBlock
                                        "&{codeBlock {language|scriba} `\n  An {emph|interesting} proposition.\n`}\n\n&{olist|\n{item|First item}\n{item|Second item}\n}"
                                    , ParBlock
                                        (Paragraph
                                           [ ParInline
                                               (Str
                                                  "Blocks are written like inline elements, complete with attributes and\narguments, except they are preceded by a ")
                                           , ParInline (Code "&")
                                           , ParInline
                                               (Str
                                                  ". They differ from\ninline elements in their content: blocks have ")
                                           , ParInline (Emph [ Str "verbatim" ])
                                           , ParInline (Str ",\n")
                                           , ParInline (Emph [ Str "block" ])
                                           , ParInline (Str ", and ")
                                           , ParInline (Emph [ Str "inline" ])
                                           , ParInline
                                               (Str
                                                  " content. Verbatim content is signalled\nby a ")
                                           , ParInline (Code "`")
                                           , ParInline
                                               (Str
                                                  " (backtick) character, starts on the next line, then runs\nuntil the sequence ")
                                           , ParInline (Code "`}")
                                           , ParInline
                                               (Str
                                                  " appears at the start of a line. The\ncontent itself becomes plain text; no control characters are\nrecognized in it. Block content is signalled by a ")
                                           , ParInline (Code "&")
                                           , ParInline
                                               (Str
                                                  " character,\nand consists of a sequence of blocks and paragraphs, like section\ncontent without section headers. Finally, inline content is signalled\nby a ")
                                           , ParInline (Code "|")
                                           , ParInline
                                               (Str " and can contain text and inline elements.")
                                           ])
                                    ]
                                , secChildren = []
                                }
                          }
                      , Section
                          { secTitle = Title { titleBody = [ Str "Mathematics" ] }
                          , secContent =
                              SectionContent
                                { secPreamble =
                                    [ ParBlock
                                        (Paragraph
                                           [ ParInline
                                               (Str
                                                  "Formal mathematical content can be included in a document with\nparticular inline elements. Inline formulas like ")
                                           , ParInline (Math "2^3 = 8")
                                           , ParInline (Str ", and\ndisplayed formulas like\n")
                                           , ParInline
                                               (DisplayMath
                                                  (Formula
                                                     "\n  \\mathbf{B}(P) = \\frac{\\mu_0}{4\\pi}\n  \\int\\frac{\\mathbf{I}\\times\\hat{r}'}{r'^2}dl = \\frac{\\mu_0}{4\\pi}\\,I\\!\n  \\int\\frac{d\\boldsymbol{l}\\times\\hat{r}'}{r'^2}\n"))
                                           , ParInline
                                               (Str
                                                  "\nare available, among other more complex constructs. The formulas\nthemselves are written in TeX syntax by default, and rendering in HTML\nis handled with MathJax.")
                                           ])
                                    , ParBlock (Paragraph [])
                                    ]
                                , secChildren = []
                                }
                          }
                      , Section
                          { secTitle =
                              Title { titleBody = [ Str "The overall document structure" ] }
                          , secContent =
                              SectionContent
                                { secPreamble =
                                    [ ParBlock
                                        (Paragraph
                                           [ ParInline
                                               (Str
                                                  "Will contain a description of documents as a whole.")
                                           ])
                                    ]
                                , secChildren = []
                                }
                          }
                      ]
                  }
            }
        , Section
            { secTitle = Title { titleBody = [ Str "Element reference" ] }
            , secContent =
                SectionContent
                  { secPreamble = [ ParBlock (Paragraph []) ]
                  , secChildren =
                      [ Section
                          { secTitle = Title { titleBody = [ Str "formalBlock" ] }
                          , secContent =
                              SectionContent
                                { secPreamble =
                                    [ ParBlock
                                        (Paragraph
                                           [ ParInline (Str "The ")
                                           , ParInline (Code "formalBlock")
                                           , ParInline
                                               (Str
                                                  " element represents a formal part of the\ndocument, with optional ")
                                           , ParInline (Code "title")
                                           , ParInline (Str ", ")
                                           , ParInline (Code "conclusion")
                                           , ParInline (Str ", and\n")
                                           , ParInline (Code "type")
                                           , ParInline
                                               (Str
                                                  " attributes. It can contain block or inline content. It can\nbe used to represent theorems, propositions, exercises, proofs, and\nother amsthm-style elements.")
                                           ])
                                    , ParBlock (Paragraph [])
                                    , ParBlock (Paragraph [ ParInline (Str "An example:") ])
                                    , FormalBlock
                                        Formal
                                          { fType = Just "theorem"
                                          , fTitle = [ Str "Theorem 4.2 (an interesting one). " ]
                                          , fContent =
                                              [ ParBlock
                                                  (Paragraph
                                                     [ ParInline
                                                         (Str
                                                            "The statement of some theorem of interest.\n")
                                                     ])
                                              ]
                                          , fConclusion = []
                                          }
                                    ]
                                , secChildren = []
                                }
                          }
                      , Section
                          { secTitle = Title { titleBody = [ Str "olist" ] }
                          , secContent =
                              SectionContent
                                { secPreamble =
                                    [ ParBlock
                                        (Paragraph
                                           [ ParInline (Str "The ")
                                           , ParInline (Code "olist")
                                           , ParInline
                                               (Str
                                                  " block element represents an ordered list. It contains\na whitespace-separated list of ")
                                           , ParInline (Code "item")
                                           , ParInline (Str " elements.")
                                           ])
                                    , ParBlock (Paragraph [ ParInline (Str "An example:") ])
                                    , ListBlock
                                        (Olist
                                           [ [ ParBlock
                                                 (Paragraph [ ParInline (Str "First element") ])
                                             ]
                                           , [ ParBlock
                                                 (Paragraph [ ParInline (Str "Second element") ])
                                             ]
                                           , [ ParBlock
                                                 (Paragraph [ ParInline (Str "Third element") ])
                                             ]
                                           ])
                                    ]
                                , secChildren = []
                                }
                          }
                      ]
                  }
            }
        ]
    }
  SectionContent { secPreamble = [] , secChildren = [] }