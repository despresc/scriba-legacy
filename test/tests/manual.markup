Doc
  DocAttrs
    { docTitle =
        Title
          { titleBody =
              [ Istr
                  Str { getStr = "The scriba markup language and document system" }
              ]
          }
    , docPlainTitle = "The scriba markup language and document system"
    , docTitlingConfig =
        TitlingConfig
          { tcFormalConfig =
              fromList
                [ ( "lemma"
                  , FormalConfig
                      { fconfTitleTemplate =
                          Just
                            TitleTemplate
                              { ttemplatePrefix =
                                  Surround
                                    { surroundBefore = []
                                    , surroundMid = Just [ Istr Str { getStr = "Lemma" } ]
                                    , surroundAfter = []
                                    }
                              , ttemplateNumber =
                                  Surround
                                    { surroundBefore = []
                                    , surroundMid = Nothing
                                    , surroundAfter = [ Istr Str { getStr = "." } ]
                                    }
                              , ttemplateBody =
                                  Surround
                                    { surroundBefore = []
                                    , surroundMid = Nothing
                                    , surroundAfter = []
                                    }
                              , ttemplatePartSep = [ Istr Str { getStr = " " } ]
                              , ttemplatePrefixFirst = False
                              }
                      , fconfTitleSep = Just [ Istr Str { getStr = ". " } ]
                      , fconfConcl = Nothing
                      }
                  )
                , ( "proof"
                  , FormalConfig
                      { fconfTitleTemplate =
                          Just
                            TitleTemplate
                              { ttemplatePrefix =
                                  Surround
                                    { surroundBefore = []
                                    , surroundMid = Just [ Istr Str { getStr = "Proof" } ]
                                    , surroundAfter = []
                                    }
                              , ttemplateNumber =
                                  Surround
                                    { surroundBefore = []
                                    , surroundMid = Nothing
                                    , surroundAfter = []
                                    }
                              , ttemplateBody =
                                  Surround
                                    { surroundBefore = []
                                    , surroundMid = Nothing
                                    , surroundAfter = []
                                    }
                              , ttemplatePartSep = [ Istr Str { getStr = " " } ]
                              , ttemplatePrefixFirst = True
                              }
                      , fconfTitleSep = Just [ Istr Str { getStr = ". " } ]
                      , fconfConcl = Just [ Istr Str { getStr = "\8718" } ]
                      }
                  )
                , ( "theorem"
                  , FormalConfig
                      { fconfTitleTemplate =
                          Just
                            TitleTemplate
                              { ttemplatePrefix =
                                  Surround
                                    { surroundBefore = []
                                    , surroundMid = Just [ Istr Str { getStr = "Theorem" } ]
                                    , surroundAfter = []
                                    }
                              , ttemplateNumber =
                                  Surround
                                    { surroundBefore = []
                                    , surroundMid = Nothing
                                    , surroundAfter = [ Istr Str { getStr = "." } ]
                                    }
                              , ttemplateBody =
                                  Surround
                                    { surroundBefore = [ Istr Str { getStr = "(" } ]
                                    , surroundMid = Nothing
                                    , surroundAfter = [ Istr Str { getStr = ")" } ]
                                    }
                              , ttemplatePartSep = [ Istr Str { getStr = " " } ]
                              , ttemplatePrefixFirst = True
                              }
                      , fconfTitleSep = Just [ Istr Str { getStr = ". " } ]
                      , fconfConcl = Nothing
                      }
                  )
                ]
          , tcSectionConfig =
              fromList
                [ ( "section"
                  , SectionConfig
                      { sconfTitleTemplate =
                          Just
                            TitleTemplate
                              { ttemplatePrefix =
                                  Surround
                                    { surroundBefore = []
                                    , surroundMid = Just [ Istr Str { getStr = "Section" } ]
                                    , surroundAfter = []
                                    }
                              , ttemplateNumber =
                                  Surround
                                    { surroundBefore = []
                                    , surroundMid = Nothing
                                    , surroundAfter = [ Istr Str { getStr = "." } ]
                                    }
                              , ttemplateBody =
                                  Surround
                                    { surroundBefore = []
                                    , surroundMid = Nothing
                                    , surroundAfter = []
                                    }
                              , ttemplatePartSep = [ Istr Str { getStr = " " } ]
                              , ttemplatePrefixFirst = True
                              }
                      }
                  )
                , ( "subsection"
                  , SectionConfig
                      { sconfTitleTemplate =
                          Just
                            TitleTemplate
                              { ttemplatePrefix =
                                  Surround
                                    { surroundBefore = []
                                    , surroundMid = Nothing
                                    , surroundAfter = []
                                    }
                              , ttemplateNumber =
                                  Surround
                                    { surroundBefore = []
                                    , surroundMid = Nothing
                                    , surroundAfter = [ Istr Str { getStr = "." } ]
                                    }
                              , ttemplateBody =
                                  Surround
                                    { surroundBefore = []
                                    , surroundMid = Nothing
                                    , surroundAfter = []
                                    }
                              , ttemplatePartSep = [ Istr Str { getStr = " " } ]
                              , ttemplatePrefixFirst = True
                              }
                      }
                  )
                ]
          }
    , docElemCounterRel =
        fromList
          [ ( ContainerName { unContainerName = "lemma" }
            , ( CounterName { unCounterName = "theorem" }
              , NumberConfig
                  { ncNumberStyle = Decimal
                  , ncRefPrefix = Nothing
                  , ncRefSep = Nothing
                  }
              )
            )
          , ( ContainerName { unContainerName = "section" }
            , ( CounterName { unCounterName = "section" }
              , NumberConfig
                  { ncNumberStyle = Decimal
                  , ncRefPrefix = Nothing
                  , ncRefSep = Nothing
                  }
              )
            )
          , ( ContainerName { unContainerName = "subsection" }
            , ( CounterName { unCounterName = "subsection" }
              , NumberConfig
                  { ncNumberStyle = Decimal
                  , ncRefPrefix = Just [ Istr Str { getStr = "\167" } ]
                  , ncRefSep = Nothing
                  }
              )
            )
          , ( ContainerName { unContainerName = "theorem" }
            , ( CounterName { unCounterName = "theorem" }
              , NumberConfig
                  { ncNumberStyle = Decimal
                  , ncRefPrefix = Nothing
                  , ncRefSep = Nothing
                  }
              )
            )
          ]
    , docCounterRel =
        fromList
          [ ( CounterName { unCounterName = "section" }
            , fromList
                [ CounterName { unCounterName = "subsection" }
                , CounterName { unCounterName = "theorem" }
                ]
            )
          , ( CounterName { unCounterName = "subsection" } , fromList [] )
          , ( CounterName { unCounterName = "theorem" } , fromList [] )
          ]
    }
  SectionContent { secPreamble = [] , secChildren = [] }
  SectionContent
    { secPreamble =
        [ Bpar
            Paragraph
              { getParagraph =
                  [ Istr
                      Str
                        { getStr =
                            "Scriba is a plain text markup language emphasizing extensibility,\nclarity, and ease of use. It is also a compiler, taking source scriba\ndocuments and rendering them to multi-page HTML, EPUB, and TeX. The\nformat includes flexible markup constructs designed to represent a\nrange of historical scientific material, but these can be used equally\nwell for new publications."
                        }
                  ]
              }
        ]
    , secChildren =
        [ Section
            { secType = Just "section"
            , secId = Nothing
            , secTitleBody =
                Just
                  Title
                    { titleBody =
                        [ Istr Str { getStr = "An introduction to the language" } ]
                    }
            , secTitleFull =
                Just
                  Title
                    { titleBody =
                        [ ItitleComponent
                            (TitleComponent
                               TitlePrefix [] [ Istr Str { getStr = "Section" } ] [])
                        , Istr Str { getStr = " " }
                        , ItitleComponent
                            (TitleComponent
                               TitleNumber
                               []
                               [ Istr Str { getStr = "1" } ]
                               [ Istr Str { getStr = "." } ])
                        , Istr Str { getStr = " " }
                        , ItitleComponent
                            (TitleComponent
                               TitleBody
                               []
                               [ Istr Str { getStr = "An introduction to the language" } ]
                               [])
                        ]
                    }
            , secNum = Just "1"
            , secContent =
                SectionContent
                  { secPreamble = []
                  , secChildren =
                      [ Section
                          { secType = Just "subsection"
                          , secId = Nothing
                          , secTitleBody =
                              Just Title { titleBody = [ Istr Str { getStr = "Paragraphs" } ] }
                          , secTitleFull =
                              Just
                                Title
                                  { titleBody =
                                      [ ItitleComponent
                                          (TitleComponent
                                             TitleNumber
                                             []
                                             [ Istr Str { getStr = "1.1" } ]
                                             [ Istr Str { getStr = "." } ])
                                      , Istr Str { getStr = " " }
                                      , ItitleComponent
                                          (TitleComponent
                                             TitleBody [] [ Istr Str { getStr = "Paragraphs" } ] [])
                                      ]
                                  }
                          , secNum = Just "1.1"
                          , secContent =
                              SectionContent
                                { secPreamble =
                                    [ Bpar
                                        Paragraph
                                          { getParagraph =
                                              [ Istr
                                                  Str
                                                    { getStr =
                                                        "The bulk of your document will most likely be paragraphs, sequences of\nnormal text and marked-up content representing a single idea in your\nwriting. A paragraph in scriba is a type of "
                                                    }
                                              , Iemph
                                                  Emph
                                                    { getEmph = [ Istr Str { getStr = "block" } ] }
                                              , Istr Str { getStr = ", and contains\n" }
                                              , Iemph
                                                  Emph
                                                    { getEmph =
                                                        [ Istr Str { getStr = "paragraph text" } ]
                                                    }
                                              , Istr Str { getStr = " and " }
                                              , Iemph
                                                  Emph
                                                    { getEmph = [ Istr Str { getStr = "elements" } ]
                                                    }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        ". Two sample paragraphs are\ngiven below:"
                                                    }
                                              ]
                                          }
                                    , Bcode
                                        BlockCode
                                          { getBlockCode =
                                              "There was nothing so very remarkable in that; nor did Alice think\nit so very much out of the way to hear the Rabbit say to itself,\n{q|Oh dear! Oh dear! I shall be late!} (when she thought it over\nafterwards, it occurred to her that she ought to have wondered at\nthis, but at the time it all seemed quite natural); but when the\nRabbit actually {emph|took a watch out of its waistcoat-pocket},\nand looked at it, and then hurried on, Alice started to her feet,\nfor it flashed across her mind that she had never before seen a\nrabbit with either a waistcoat-pocket, or a watch to take out of\nit, and burning with curiosity, she ran across the field after it,\nand fortunately was just in time to see it pop down a large\nrabbit-hole under the hedge.\n\nIn another moment down went Alice after it, never once considering\nhow in the world she was to get out again."
                                          }
                                    , Bpar
                                        Paragraph
                                          { getParagraph =
                                              [ Istr
                                                  Str
                                                    { getStr =
                                                        "Plain paragraph text is any span of unicode characters other than\n"
                                                    }
                                              , Icode InlineCode { getInlineCode = "\\" }
                                              , Istr Str { getStr = ", " }
                                              , Icode InlineCode { getInlineCode = "{" }
                                              , Istr Str { getStr = ", or " }
                                              , Icode InlineCode { getInlineCode = "}" }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        ", with the additional restriction\nthat paragraph text cannot contain blank lines; like in the example\nabove, these signal the end of the paragraph. Those three characters\ncan be represented in paragraph text using the sequences "
                                                    }
                                              , Icode InlineCode { getInlineCode = "\\\\" }
                                              , Istr Str { getStr = ",\n" }
                                              , Icode InlineCode { getInlineCode = "\\{" }
                                              , Istr Str { getStr = ", and " }
                                              , Icode InlineCode { getInlineCode = "\\}" }
                                              , Istr
                                                  Str
                                                    { getStr = ", should you need them in text. " }
                                              ]
                                          }
                                    , Bpar
                                        Paragraph
                                          { getParagraph =
                                              [ Istr
                                                  Str
                                                    { getStr =
                                                        "The other feature of paragraph markup is "
                                                    }
                                              , Iemph
                                                  Emph
                                                    { getEmph =
                                                        [ Istr Str { getStr = "inline elements" } ]
                                                    }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        ", which\nare used to give further meaning to your text and to control scriba's\nmany features."
                                                    }
                                              , Istr
                                                  Str { getStr = " Simple\nelements start with " }
                                              , Icode InlineCode { getInlineCode = "{tag|" }
                                              , Istr Str { getStr = " and end with " }
                                              , Icode InlineCode { getInlineCode = "}" }
                                              , Istr
                                                  Str { getStr = ". The\nparagraphs above have a " }
                                              , Icode InlineCode { getInlineCode = "q" }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        " element, representing quoted text\nand likely to be rendered between quotation marks, and an "
                                                    }
                                              , Icode InlineCode { getInlineCode = "emph" }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        "\nelement, representing emphasized text and likely to be rendered in\nitalic type."
                                                    }
                                              ]
                                          }
                                    ]
                                , secChildren = []
                                }
                          }
                      , Section
                          { secType = Just "subsection"
                          , secId = Nothing
                          , secTitleBody =
                              Just Title { titleBody = [ Istr Str { getStr = "Sections" } ] }
                          , secTitleFull =
                              Just
                                Title
                                  { titleBody =
                                      [ ItitleComponent
                                          (TitleComponent
                                             TitleNumber
                                             []
                                             [ Istr Str { getStr = "1.2" } ]
                                             [ Istr Str { getStr = "." } ])
                                      , Istr Str { getStr = " " }
                                      , ItitleComponent
                                          (TitleComponent
                                             TitleBody [] [ Istr Str { getStr = "Sections" } ] [])
                                      ]
                                  }
                          , secNum = Just "1.2"
                          , secContent =
                              SectionContent
                                { secPreamble =
                                    [ Bpar
                                        Paragraph
                                          { getParagraph =
                                              [ Istr
                                                  Str
                                                    { getStr =
                                                        "The content of your document can be organized into "
                                                    }
                                              , Iemph
                                                  Emph
                                                    { getEmph = [ Istr Str { getStr = "sections" } ]
                                                    }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        ",\nrepresenting self-contained units of discussion. These have types,\ntitles, and a body of blocks and subsections. Sections look like this:"
                                                    }
                                              ]
                                          }
                                    , Bcode
                                        BlockCode
                                          { getBlockCode =
                                              "# {title|An introduction to the language}\n\n## {title|Paragraphs}\n\nThe bulk of your document \8230"
                                          }
                                    , Bpar
                                        Paragraph
                                          { getParagraph =
                                              [ Istr
                                                  Str
                                                    { getStr =
                                                        "The first component of a section is its "
                                                    }
                                              , Iemph
                                                  Emph
                                                    { getEmph = [ Istr Str { getStr = "header" } ] }
                                              , Istr
                                                  Str
                                                    { getStr = ". The section\nheader starts with "
                                                    }
                                              , Icode InlineCode { getInlineCode = "# sectionType" }
                                              , Istr
                                                  Str { getStr = ", the number of consecutive\n" }
                                              , Icode InlineCode { getInlineCode = "#" }
                                              , Istr Str { getStr = " becoming the overall " }
                                              , Iemph
                                                  Emph
                                                    { getEmph = [ Istr Str { getStr = "level" } ] }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        " of the section. The\nsection content begins after the attributes of the section and at\nleast one blank line, and continues until a section of at most that\nlevel, or the end of the document, is reached. In the example above,\nthe "
                                                    }
                                              , Iquote
                                                  Quote
                                                    { getQuote =
                                                        [ Istr Str { getStr = "Paragraphs" } ]
                                                    }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        " section would continue until a level 2 or level 1\nsection were encountered. The section type is optional; section types\nclassify the section, can denote built-in document structure, and can\ninfluence processing and rendering behaviour. Sections without a type\nbecome a generic "
                                                    }
                                              , Icode InlineCode { getInlineCode = "section" }
                                              , Istr Str { getStr = "." }
                                              ]
                                          }
                                    , Bpar
                                        Paragraph
                                          { getParagraph =
                                              [ Istr
                                                  Str
                                                    { getStr =
                                                        "Sections, like other elements, can have "
                                                    }
                                              , Iemph
                                                  Emph
                                                    { getEmph =
                                                        [ Istr Str { getStr = "attributes" } ]
                                                    }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        ". The only\nrecognized attribute of a section, for now, is its title. In future,\nsections will have many attributes, like number, language, alternate\ntitles for the table of contents or page header, and so on. The\nattributes of sections can be listed on multiple consecutive lines, as\nlong as no blank line occurs between them."
                                                    }
                                              ]
                                          }
                                    ]
                                , secChildren = []
                                }
                          }
                      , Section
                          { secType = Just "subsection"
                          , secId = Nothing
                          , secTitleBody =
                              Just Title { titleBody = [ Istr Str { getStr = "Blocks" } ] }
                          , secTitleFull =
                              Just
                                Title
                                  { titleBody =
                                      [ ItitleComponent
                                          (TitleComponent
                                             TitleNumber
                                             []
                                             [ Istr Str { getStr = "1.3" } ]
                                             [ Istr Str { getStr = "." } ])
                                      , Istr Str { getStr = " " }
                                      , ItitleComponent
                                          (TitleComponent
                                             TitleBody [] [ Istr Str { getStr = "Blocks" } ] [])
                                      ]
                                  }
                          , secNum = Just "1.3"
                          , secContent =
                              SectionContent
                                { secPreamble =
                                    [ Bpar
                                        Paragraph
                                          { getParagraph =
                                              [ Istr
                                                  Str
                                                    { getStr =
                                                        "The other type of syntactic form in scriba is the "
                                                    }
                                              , Iemph
                                                  Emph
                                                    { getEmph = [ Istr Str { getStr = "block" } ] }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        "\nelement. Blocks group their content and give it extra meaning, and can\nappear wherever paragraphs or section headers can. Some blocks are\nshown in the following code sample:"
                                                    }
                                              ]
                                          }
                                    , Bcode
                                        BlockCode
                                          { getBlockCode =
                                              "&{codeBlock {language|scriba} `\n  An {emph|interesting} proposition.\n`}\n\n&{olist|\n{item|First item}\n{item|Second item}\n}"
                                          }
                                    , Bpar
                                        Paragraph
                                          { getParagraph =
                                              [ Istr
                                                  Str
                                                    { getStr =
                                                        "Blocks are written like inline elements, complete with attributes and\narguments, except they are preceded by a "
                                                    }
                                              , Icode InlineCode { getInlineCode = "&" }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        ". They differ from\ninline elements in their content: blocks have "
                                                    }
                                              , Iemph
                                                  Emph
                                                    { getEmph = [ Istr Str { getStr = "verbatim" } ]
                                                    }
                                              , Istr Str { getStr = ",\n" }
                                              , Iemph
                                                  Emph
                                                    { getEmph = [ Istr Str { getStr = "block" } ] }
                                              , Istr Str { getStr = ", and " }
                                              , Iemph
                                                  Emph
                                                    { getEmph = [ Istr Str { getStr = "inline" } ] }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        " content. Verbatim content is signalled\nby a "
                                                    }
                                              , Icode InlineCode { getInlineCode = "`" }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        " (backtick) character, starts on the next line, then runs\nuntil the sequence "
                                                    }
                                              , Icode InlineCode { getInlineCode = "`}" }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        " appears on a line indented by at most as\nmuch as the start-of-block "
                                                    }
                                              , Icode InlineCode { getInlineCode = "&" }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        " character is. The content itself\nbecomes plain text; no control characters are recognized in it. Block\ncontent is signalled by a "
                                                    }
                                              , Icode InlineCode { getInlineCode = "&" }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        " character, and consists of a\nsequence of blocks and paragraphs, like section content without\nsection headers. Finally, inline content is signalled by a "
                                                    }
                                              , Icode InlineCode { getInlineCode = "|" }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        "\nand can contain text and inline elements."
                                                    }
                                              ]
                                          }
                                    ]
                                , secChildren = []
                                }
                          }
                      , Section
                          { secType = Just "subsection"
                          , secId = Nothing
                          , secTitleBody =
                              Just Title { titleBody = [ Istr Str { getStr = "Mathematics" } ] }
                          , secTitleFull =
                              Just
                                Title
                                  { titleBody =
                                      [ ItitleComponent
                                          (TitleComponent
                                             TitleNumber
                                             []
                                             [ Istr Str { getStr = "1.4" } ]
                                             [ Istr Str { getStr = "." } ])
                                      , Istr Str { getStr = " " }
                                      , ItitleComponent
                                          (TitleComponent
                                             TitleBody
                                             []
                                             [ Istr Str { getStr = "Mathematics" } ]
                                             [])
                                      ]
                                  }
                          , secNum = Just "1.4"
                          , secContent =
                              SectionContent
                                { secPreamble =
                                    [ Bpar
                                        Paragraph
                                          { getParagraph =
                                              [ Istr
                                                  Str
                                                    { getStr =
                                                        "Formal mathematical content can be included in a document with\nparticular inline elements. Inline formulas like "
                                                    }
                                              , IinlineMath
                                                  InlineMath
                                                    { getInlineMath = "f(x, y) =\nx^{y+6}" }
                                              , Istr
                                                  Str { getStr = ", and displayed formulas like\n" }
                                              , IdisplayMath
                                                  (Formula
                                                     "\n  \\mathbf{B}(P) = \\frac{\\mu_0}{4\\pi}\n  \\int\\frac{\\mathbf{I}\\times\\hat{r}'}{r'^2}dl = \\frac{\\mu_0}{4\\pi}\\,I\\!\n  \\int\\frac{d\\boldsymbol{l}\\times\\hat{r}'}{r'^2}\n")
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        "\nare available, among other more complex constructs. The formulas\nthemselves are written in TeX syntax by default, and rendering in HTML\nis handled with MathJax. Be aware that amsmath-style environments like\n"
                                                    }
                                              , Icode InlineCode { getInlineCode = "gathered" }
                                              , Istr Str { getStr = " or " }
                                              , Icode InlineCode { getInlineCode = "alignedat" }
                                              , Istr Str { getStr = " should not be used inside\n" }
                                              , Icode InlineCode { getInlineCode = "math" }
                                              , Istr Str { getStr = " or " }
                                              , Icode InlineCode { getInlineCode = "dmath" }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        " elements themselves. Scriba itself\nimplements some of these environments as elements, so that they can\ninteract with its built-in numbering and referencing capabilities."
                                                    }
                                              ]
                                          }
                                    , Bpar
                                        Paragraph
                                          { getParagraph =
                                              [ Istr
                                                  Str
                                                    { getStr =
                                                        "The examples of formulas above were entered into the source like so:"
                                                    }
                                              ]
                                          }
                                    , Bcode
                                        BlockCode
                                          { getBlockCode =
                                              "Inline formulas like {math`f(x, y) = x^{y+6}`}, and displayed formulas like\n{dmath`\n  \\mathbf{B}(P) = \\frac{\\mu_0}{4\\pi}\n  \\int\\frac{\\mathbf{I}\\times\\hat{r}'}{r'^2}dl = \\frac{\\mu_0}{4\\pi}\\,I\\!\n  \\int\\frac{d\\boldsymbol{l}\\times\\hat{r}'}{r'^2}\n`}\nare available, among \8230"
                                          }
                                    , Bpar
                                        Paragraph
                                          { getParagraph =
                                              [ Istr
                                                  Str
                                                    { getStr =
                                                        "Since TeX syntax is heavily reliant on braces and backlashes, it will\noften be necessary for you to escape them in some way when entering\nmath in that notation. In the inline example math example above, an\n"
                                                    }
                                              , Iemph
                                                  Emph
                                                    { getEmph =
                                                        [ Istr
                                                            Str { getStr = "inline verbatim body" }
                                                        ]
                                                    }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        " was used for this purpose. Like block\nverbatim content, such a body starts with a "
                                                    }
                                              , Icode InlineCode { getInlineCode = "`" }
                                              , Istr Str { getStr = " character instead\nof a " }
                                              , Icode InlineCode { getInlineCode = "|" }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        ". Inline verbatim content runs until it encounters a\n"
                                                    }
                                              , Icode InlineCode { getInlineCode = "`}" }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        ", and inside it any double-backtick "
                                                    }
                                              , Icode InlineCode { getInlineCode = "``" }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        " sequences\ncollapse to a single backtick. The effect of this is to disable any\nother special character processing, even comments, so that the syntax\nof other languages can be included into scriba without too much\noverhead. This is only a syntactic convenience in this case; the\ninline example above could equally well have been written\n"
                                                    }
                                              , Icode
                                                  InlineCode
                                                    { getInlineCode = "{math|f(x, y) = x^\\{y+6\\}}"
                                                    }
                                              , Istr Str { getStr = "." }
                                              ]
                                          }
                                    ]
                                , secChildren = []
                                }
                          }
                      , Section
                          { secType = Just "subsection"
                          , secId = Nothing
                          , secTitleBody =
                              Just
                                Title
                                  { titleBody =
                                      [ Istr Str { getStr = "The overall document structure" } ]
                                  }
                          , secTitleFull =
                              Just
                                Title
                                  { titleBody =
                                      [ ItitleComponent
                                          (TitleComponent
                                             TitleNumber
                                             []
                                             [ Istr Str { getStr = "1.5" } ]
                                             [ Istr Str { getStr = "." } ])
                                      , Istr Str { getStr = " " }
                                      , ItitleComponent
                                          (TitleComponent
                                             TitleBody
                                             []
                                             [ Istr
                                                 Str { getStr = "The overall document structure" }
                                             ]
                                             [])
                                      ]
                                  }
                          , secNum = Just "1.5"
                          , secContent =
                              SectionContent
                                { secPreamble =
                                    [ Bpar
                                        Paragraph
                                          { getParagraph =
                                              [ Istr
                                                  Str
                                                    { getStr =
                                                        "Will contain a description of documents as a whole."
                                                    }
                                              ]
                                          }
                                    ]
                                , secChildren = []
                                }
                          }
                      ]
                  }
            }
        , Section
            { secType = Just "section"
            , secId = Nothing
            , secTitleBody =
                Just
                  Title { titleBody = [ Istr Str { getStr = "Element reference" } ] }
            , secTitleFull =
                Just
                  Title
                    { titleBody =
                        [ ItitleComponent
                            (TitleComponent
                               TitlePrefix [] [ Istr Str { getStr = "Section" } ] [])
                        , Istr Str { getStr = " " }
                        , ItitleComponent
                            (TitleComponent
                               TitleNumber
                               []
                               [ Istr Str { getStr = "2" } ]
                               [ Istr Str { getStr = "." } ])
                        , Istr Str { getStr = " " }
                        , ItitleComponent
                            (TitleComponent
                               TitleBody [] [ Istr Str { getStr = "Element reference" } ] [])
                        ]
                    }
            , secNum = Just "2"
            , secContent =
                SectionContent
                  { secPreamble = []
                  , secChildren =
                      [ Section
                          { secType = Just "subsection"
                          , secId = Nothing
                          , secTitleBody =
                              Just Title { titleBody = [ Istr Str { getStr = "formalBlock" } ] }
                          , secTitleFull =
                              Just
                                Title
                                  { titleBody =
                                      [ ItitleComponent
                                          (TitleComponent
                                             TitleNumber
                                             []
                                             [ Istr Str { getStr = "2.1" } ]
                                             [ Istr Str { getStr = "." } ])
                                      , Istr Str { getStr = " " }
                                      , ItitleComponent
                                          (TitleComponent
                                             TitleBody
                                             []
                                             [ Istr Str { getStr = "formalBlock" } ]
                                             [])
                                      ]
                                  }
                          , secNum = Just "2.1"
                          , secContent =
                              SectionContent
                                { secPreamble =
                                    [ Bpar
                                        Paragraph
                                          { getParagraph =
                                              [ Istr Str { getStr = "The " }
                                              , Icode InlineCode { getInlineCode = "formalBlock" }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        " element represents a formal part of the\ndocument, with optional "
                                                    }
                                              , Icode InlineCode { getInlineCode = "title" }
                                              , Istr Str { getStr = ", " }
                                              , Icode InlineCode { getInlineCode = "conclusion" }
                                              , Istr Str { getStr = ", and\n" }
                                              , Icode InlineCode { getInlineCode = "type" }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        " attributes. It can contain block or inline content. It can\nbe used to represent theorems, propositions, exercises, proofs, and\nother amsthm-style elements."
                                                    }
                                              ]
                                          }
                                    , Bpar
                                        Paragraph
                                          { getParagraph =
                                              [ Istr Str { getStr = "Some examples:" } ]
                                          }
                                    , Bformal
                                        Formal
                                          { fType = Just "lemma"
                                          , fLabel = Nothing
                                          , fNum = Just "2.1"
                                          , fTitle =
                                              Just
                                                [ ItitleComponent
                                                    (TitleComponent
                                                       TitleNumber
                                                       []
                                                       [ Istr Str { getStr = "2.1" } ]
                                                       [ Istr Str { getStr = "." } ])
                                                , Istr Str { getStr = " " }
                                                , ItitleComponent
                                                    (TitleComponent
                                                       TitlePrefix
                                                       []
                                                       [ Istr Str { getStr = "Lemma" } ]
                                                       [])
                                                ]
                                          , fNote = Nothing
                                          , fTitleSep = Just [ Istr Str { getStr = ". " } ]
                                          , fContent =
                                              MixedInline
                                                [ Istr Str { getStr = "A preliminary lemma.\n" } ]
                                          , fConclusion = Nothing
                                          }
                                    , Bformal
                                        Formal
                                          { fType = Just "theorem"
                                          , fLabel = Nothing
                                          , fNum = Just "2.2"
                                          , fTitle =
                                              Just
                                                [ ItitleComponent
                                                    (TitleComponent
                                                       TitlePrefix
                                                       []
                                                       [ Istr Str { getStr = "Theorem" } ]
                                                       [])
                                                , Istr Str { getStr = " " }
                                                , ItitleComponent
                                                    (TitleComponent
                                                       TitleNumber
                                                       []
                                                       [ Istr Str { getStr = "2.2" } ]
                                                       [ Istr Str { getStr = "." } ])
                                                , Istr Str { getStr = " " }
                                                , ItitleComponent
                                                    (TitleComponent
                                                       TitleNote
                                                       [ Istr Str { getStr = "(" } ]
                                                       [ Istr Str { getStr = "an interesting one" }
                                                       ]
                                                       [ Istr Str { getStr = ")" } ])
                                                ]
                                          , fNote =
                                              Just [ Istr Str { getStr = "an interesting one" } ]
                                          , fTitleSep = Just [ Istr Str { getStr = ". " } ]
                                          , fContent =
                                              MixedInline
                                                [ Istr
                                                    Str
                                                      { getStr =
                                                          "The statement of some theorem of interest.\n"
                                                      }
                                                ]
                                          , fConclusion = Nothing
                                          }
                                    , Bformal
                                        Formal
                                          { fType = Just "proof"
                                          , fLabel = Nothing
                                          , fNum = Nothing
                                          , fTitle =
                                              Just
                                                [ ItitleComponent
                                                    (TitleComponent
                                                       TitlePrefix
                                                       []
                                                       [ Istr Str { getStr = "Proof" } ]
                                                       [])
                                                , Istr Str { getStr = " " }
                                                , ItitleComponent
                                                    (TitleComponent
                                                       TitleNote
                                                       []
                                                       [ Istr
                                                           Str
                                                             { getStr = "of the interesting theorem"
                                                             }
                                                       ]
                                                       [])
                                                ]
                                          , fNote =
                                              Just
                                                [ Istr Str { getStr = "of the interesting theorem" }
                                                ]
                                          , fTitleSep = Just [ Istr Str { getStr = ". " } ]
                                          , fContent =
                                              MixedInline
                                                [ Istr Str { getStr = "Details of the proof\n" } ]
                                          , fConclusion = Just [ Istr Str { getStr = "\8718" } ]
                                          }
                                    ]
                                , secChildren = []
                                }
                          }
                      , Section
                          { secType = Just "subsection"
                          , secId = Just Identifier { getIdentifier = "elem-olist" }
                          , secTitleBody =
                              Just Title { titleBody = [ Istr Str { getStr = "olist" } ] }
                          , secTitleFull =
                              Just
                                Title
                                  { titleBody =
                                      [ ItitleComponent
                                          (TitleComponent
                                             TitleNumber
                                             []
                                             [ Istr Str { getStr = "2.2" } ]
                                             [ Istr Str { getStr = "." } ])
                                      , Istr Str { getStr = " " }
                                      , ItitleComponent
                                          (TitleComponent
                                             TitleBody [] [ Istr Str { getStr = "olist" } ] [])
                                      ]
                                  }
                          , secNum = Just "2.2"
                          , secContent =
                              SectionContent
                                { secPreamble =
                                    [ Bpar
                                        Paragraph
                                          { getParagraph =
                                              [ Istr Str { getStr = "The " }
                                              , Icode InlineCode { getInlineCode = "olist" }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        " block element represents an ordered list. It contains\na whitespace-separated list of "
                                                    }
                                              , Icode InlineCode { getInlineCode = "item" }
                                              , Istr Str { getStr = " elements." }
                                              ]
                                          }
                                    , Bpar
                                        Paragraph
                                          { getParagraph = [ Istr Str { getStr = "An example:" } ] }
                                    , Blist
                                        (Olist
                                           [ MixedInline [ Istr Str { getStr = "First element" } ]
                                           , MixedInline [ Istr Str { getStr = "Second element" } ]
                                           , MixedInline [ Istr Str { getStr = "Third element" } ]
                                           ])
                                    ]
                                , secChildren = []
                                }
                          }
                      , Section
                          { secType = Just "subsection"
                          , secId = Just Identifier { getIdentifier = "elem-ref" }
                          , secTitleBody =
                              Just Title { titleBody = [ Istr Str { getStr = "ref" } ] }
                          , secTitleFull =
                              Just
                                Title
                                  { titleBody =
                                      [ ItitleComponent
                                          (TitleComponent
                                             TitleNumber
                                             []
                                             [ Istr Str { getStr = "2.3" } ]
                                             [ Istr Str { getStr = "." } ])
                                      , Istr Str { getStr = " " }
                                      , ItitleComponent
                                          (TitleComponent
                                             TitleBody [] [ Istr Str { getStr = "ref" } ] [])
                                      ]
                                  }
                          , secNum = Just "2.3"
                          , secContent =
                              SectionContent
                                { secPreamble =
                                    [ Bpar
                                        Paragraph
                                          { getParagraph =
                                              [ Istr Str { getStr = "The " }
                                              , Icode InlineCode { getInlineCode = "ref" }
                                              , Istr
                                                  Str
                                                    { getStr =
                                                        " inline element represents a reference to another\nelement. It takes a single argument, the identifier of another element\nin the document. In future, it may be able to reference elements\nacross documents, and to take multiple identifier arguments."
                                                    }
                                              ]
                                          }
                                    , Bpar
                                        Paragraph
                                          { getParagraph =
                                              [ Istr
                                                  Str { getStr = "For example, we can reference " }
                                              , Iref
                                                  Ref
                                                    { refTarget =
                                                        Identifier { getIdentifier = "elem-ref" }
                                                    , refContainer =
                                                        ContainerName
                                                          { unContainerName = "subsection" }
                                                    , refNumberConfig =
                                                        NumberConfig
                                                          { ncNumberStyle = Decimal
                                                          , ncRefPrefix =
                                                              Just [ Istr Str { getStr = "\167" } ]
                                                          , ncRefSep = Nothing
                                                          }
                                                    , refNumber = "2.3"
                                                    }
                                              , Istr Str { getStr = ", this section, using\n" }
                                              , Icode
                                                  InlineCode { getInlineCode = "{ref@elem-ref}" }
                                              , Istr Str { getStr = "." }
                                              ]
                                          }
                                    ]
                                , secChildren = []
                                }
                          }
                      ]
                  }
            }
        ]
    }
  SectionContent { secPreamble = [] , secChildren = [] }